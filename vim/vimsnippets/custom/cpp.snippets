###########################################################################
#     C++ Snippets, Spiros Kabasakalis.                                   #
###########################################################################
# $0 is the last tabstop
# ${1:default} tabstop 1 with default value
# '!p' is python completion
# '!v' is vimScript completion

extends c

global !p
from snippet_helpers import *
endglobal

snippet incc
	#include <${1:iostream}>
endsnippet

snippet binc
	#include <boost/${1:shared_ptr}.hpp>
endsnippet

## STL Collections
snippet array
	std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet vector
	std::vector<${1:T}> ${2};
endsnippet

snippet deque
	std::deque<${1:T}> ${2};
endsnippet

snippet flist
	std::forward_list<${1:T}> ${2};
endsnippet

snippet list
	std::list<${1:T}> ${2};
endsnippet

snippet set
	std::set<${1:T}> ${2};
endsnippet

snippet map
	std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset
	std::multiset<${1:T}> ${2};
endsnippet

snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset
	std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset
	std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet stack
	std::stack<${1:T}> ${2};
endsnippet

snippet queue
	std::queue<${1:T}> ${2};
endsnippet

snippet pqueue
	std::priority_queue<${1:T}> ${2};
endsnippet

## Access Modifiers
snippet pri
	private
endsnippet

snippet pro
	protected
endsnippet

snippet pub
	public
endsnippet

snippet fr
	friend
endsnippet

snippet mu
	mutable
endsnippet

## Simple Class
snippet cl
class ${1:`vim_snippets#Filename('$1', 'name')`}	{
	public:
		$1(${2});
		virtual ~$1();

	private:
		m_${5};
	};
endsnippet

snippet dmfun0
	${3:void} ${1:`!p snip.rv = snip.basename.title()`}::${2:memberFunction}() {
		${0}
	}
endsnippet

snippet dmfun1
	${5:void} ${1:`!p snip.rv = snip.basename.title()`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {
		${0}
	}
endsnippet

snippet dmfun2
	${7:void} ${1:`!p snip.rv = snip.basename.title()`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {
		${0}
	}
endsnippet


snippet doxf "Basic c++ doxygen function template" b
${1:ReturnType} ${2:FunctionName}(${3:param})
{
  ${0:FunctionBody}
}
endsnippet

# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
endsnippet

## Input/Output

snippet cout
	std::cout << ${1} << std::endl;
endsnippet

snippet cin
	std::cin >> ${1};
endsnippet

## Casts
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

## Iteration

snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
endsnippet

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
endsnippet

snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}
endsnippet

snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
endsnippet

snippet forit "std::iterator for-each loop"
for (${1:vector<T>}::iterator i = ${2:items.}begin(); i != ${2}end(); ++i) ${0}
endsnippet

## Lambdas
snippet ld
	[${1}](${2}){${3}};
endsnippet

snippet lld
	[${1}](${2}){
		${3}
	};
endsnippet

snippet try
	try {

	}catch(${1}) {

	}
endsnippet

snippet ifhack "Run-time debug option"
static bool hack = false;
if (hack)
{
	${1}
}${0}
endsnippet

# Pragmas for MSVC
snippet opt "Unoptimize region start"
#pragma optimize( "", off )${0}
endsnippet

snippet opt "Unoptimize region end"
#pragma optimize( "", on )${0}
endsnippet

snippet readfilevector "read file into vector"
std::vector<char> v;
if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while (size_t len = fread(buf, 1, sizeof(buf), $2))
		v.insert(v.end(), buf, buf + len);
	fclose($2);
}${0}
endsnippet


snippet new "Construction of an object" b
${1:Type}* ${2:variable} = new $1(${3:args});
endsnippet

snippet cout "cout"
${1:std::}cout << ${1} << $1endl;${0}
endsnippet

snippet scin "scin"
${1:std::}cin >> ${1};${0}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet


snippet enumc "c++11 enum class"
// #include <cstdint> for uint8_t
// access with Enum_name::enum1
enum class ${1:Enum_name} : ${2:uint8_t}
{
    ${0:enum1},

};
endsnippet


snippet functr "trailing return type fcn"
auto ${1:funcName}(double a, double b) -> decltype(a + b);
endsnippet

snippet templatefunc "trailing return type fcn template"
template <typename ${1:type1}, typename ${2:type2}>
auto addNumbers($1 a, $2 b) -> decltype(a + b);
endsnippet


snippet spfh "Special functions header declaration"
// Special member functions declarations

virtual ~${1:`!p snip.rv = snip.basename.title()`}();   // dtor
$1(const $1& rhs);                                     // copy constructor
$1& operator=(const $1& rhs);                          // copy assignment
$1($1&& rhs);                                          // move constructor
$1& operator=($1&& rhs );                              // move assignment
endsnippet


snippet spfd "Special functions definitions default"
// Special member functions definitions

virtual ${1:`!p snip.rv = snip.basename.title()`}::~$1() = default  // dtor
$1::$1(const $0& rhs) = default 								        // copy constructor
$1& $1::operator=(const $1& rhs) = default		          // copy assignment
$1::$1($1&& rhs) = default											        // move constructor
$1& $1::operator=($1&& rhs ) = default					        // move assignment
endsnippet


snippet ctordefh "Constructor default declaration"
${1:`!p snip.rv = snip.basename.title()`}(); //= default
endsnippet

snippet ctordefd "Constructor default definition"
${1:`!p snip.rv = snip.basename.title()`}::$1(){}
endsnippet

snippet ctorh "Constructor declaration"
${1:`!p snip.rv = snip.basename.title()`}( ${2:var Type}& ${3:var} );
endsnippet

snippet ctord "Constructor definition"
${1:`!p snip.rv = snip.basename.title()`}::$1( ${2:var_Type}& ${3:var} = ${4:default_value})
	: m_$3{$3}{

	}
endsnippet

snippet dtorh "Destructo declaration"
~${1:`!p snip.rv = snip.basename.title()`}(); //= default
endsnippet

snippet dtord "Destructor definition"
${1:`!p snip.rv = snip.basename.title()`}::~$1(){}
endsnippet

snippet cctorh "Copy Constructor declaration"
${1:`!p snip.rv = snip.basename.title()`}(const $1& rhs); //= default   copy constructor
endsnippet

snippet ccptord "Copy Constructor definition"
${1:`!p snip.rv = snip.basename.title()`}::$1(const $0& rhs) = default  // copy constructor
endsnippet

snippet cah "Copy Assignment declaration"
${1:`!p snip.rv = snip.basename.title()`}& operator=(const $1& rhs);   // copy assignment
endsnippet

snippet cad "Copy Assignment definition"
${1:`!p snip.rv = snip.basename.title()`}& $1::operator=(const $1& rhs) = default		          // copy assignment
endsnippet

snippet mctorh "Move Constructor declaration"
${1:`!p snip.rv = snip.basename.title()`}($1&& rhs);   // move constructor
endsnippet

snippet mctord "move Constructor definition"
${1:`!p snip.rv = snip.basename.title()`}::$1($1&& rhs) = default // move constructor
endsnippet

snippet mah "Move Assignment declaration"
${1:`!p snip.rv = snip.basename.title()`}& operator=(const $1&& rhs);   // move assignment
endsnippet

snippet mad "Move Assignment definition"
${1:`!p snip.rv = snip.basename.title()`}& $1::operator=(const $1&& rhs) = default	// move assignment
endsnippet

snippet cl0h "Header file for zero rule class"

#pragma once
//#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name,)).upper()
else:
    snip.rv = snip.c`}
//#define $1

//#include <memory>  // unique_ptr
//#include <`!p snip.rv = snip.basename`/`!p snip.rv = snip.basename`_api.h>

namespace `!p snip.rv = snip.basename` {

class `!p snip.rv = snip.basename.upper()`_API ${2:`!p snip.rv = snip.basename.title()`} final {
	public:
		explicit $2();                                                      // default constructor
		explicit $2( const std::string&, OwnedResource&, SharedResource& ); // constructor

		// Special member functions, consider cases.
		// 1. Rule Of Zero (If applies)
		// Don't declare or default any special member function.
	  // 2. Base class to inherit from.
		// Uncomment dtor for virtual destructor, default the rest special members below,
		// remove final from class declaration.

    //virtual ~$2();                               // dtor
		//$2(const $2& rhs);                         // copy constructor
		//$2& operator=(const $2& rhs);              // copy assignment
		//$2($2&& rhs);                              // move constructor
		//$2& operator=($2&& rhs );                  // move assignment


    //Member functions

		`!p snip.rv = snip.basename.upper()`_API const $3& get_$3() const;
	  `!p snip.rv = snip.basename.upper()`_API $4& get_$4();
	  `!p snip.rv = snip.basename.upper()`_API const std:string& get_string() const;

	private:
		std::string mString;
		std::unique_ptr<${3:OwnedResource}>  m_$3;
		std::shared_ptr<${4:SharedResource}> m_$4
};

}  // namespace `!p snip.rv = snip.basename`

//#endif /* $1 */
endsnippet

snippet cl0d "Definition file for zero rule class"

//#include <memory>  // unique_ptr
#include "`!p snip.rv = snip.basename`/${1:`!p snip.rv = snip.basename + '.h'`}"

namespace `!p snip.rv = snip.basename` {

  // Default constructor
  ${2:`!p snip.rv = snip.basename.title()`}::$2() {}

  // Constructor
	$2::$2(std::string string_)
		: mString{string_}
		, m_${3:OwnedResource}{std::make_unique<$3>}
		, m_${4:SharedResource}{std::make_unique<$4>}{}

	// Special Member functions

	//virtual $2()::~$2() = default                   // dtor
	//$2::$2(const $2& rhs) = default;                   // copy constructor
	//$2& $2::operator=(const $2& rhs) = default;         // copy assignment
	//$2::$2($2&& rhs) = default;                         // move constructor
	//$2& $2::operator=($2&& rhs ) = default;             // move assignment


	// Member functions
	const $3& $2::get_$3(){
		return m_$3*;
	}

	$4& $2::get_$4(){
	  return m_$4*;
	}

	const std::string& $2::get_string(){
	  return mString;
	}

}  // namespace `!p snip.rv = snip.basename`
endsnippet



snippet pimplh "PIMP idiom by Scott Meyers"

#pragma once
//#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name,)).upper()
else:
    snip.rv = snip.c`}
//#define $1

//#include <memory>  // unique_ptr
//#include <`!p snip.rv = snip.basename`/`!p snip.rv = snip.basename`_api.h>

namespace `!p snip.rv = snip.basename` {

class ${2:`!p snip.rv = snip.basename.title()`} {
	public:
		explicit $2();                               // default constructor

    ~$2();                                       // dtor
		$2(const $2& rhs);                         // copy constructor
		$2& operator=(const $2& rhs);              // copy assignment
		$2($2&& rhs);                              // move constructor
		$2& operator=($2&& rhs );                  // move assignment

	private:
		struct Impl;
		std::unique_ptr<Impl> pImpl;
}
//#endif /* $1 */

}  // namespace `!p snip.rv = snip.basename`
endsnippet


snippet pimpld "PIMPL idiom by Scott Meyers, definition file"

//#include <memory>  // unique_ptr
#include <vector>
#include "${1:`!p snip.rv = snip.basename + '.h'`}"

namespace `!p snip.rv = snip.basename` {

  // Implementation
  struct ${2:`!p snip.rv = snip.basename.title()`}:Impl {
		const std::string& $2::get_string() const { return mString;}
		std::string mString;
		std::vector<int> data;
	}

  // Constructor
	$2::$2()
	  : pImpl(std::make_unique<Impl>()){}

	// Special Member functions
	$2()::~$2() = default                         // dtor
	$2::$2($2&& rhs) = default                    // move constructor
	$2& $2::operator=($2&& rhs ) = default        // move assignment
	$2::$2(const $2& rhs)                         // copy constructor
	: pImpl(std::make_unique<Impl>(*rhs.pImpl))
	{}
	$2& $2::operator=(const $2& rhs){             // copy assignment
		*pImpl = *rhs.pImpl;
		return *this;
	}
}
endsnippet

snippet cl5h "Rule of 5 class header declaration"
#pragma once
//#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name,)).upper()
else:
    snip.rv = snip.c`}
//#define $1

//#include <memory>  // unique_ptr
//#include <`!p snip.rv = snip.basename`/`!p snip.rv = snip.basename`_api.h>

namespace `!p snip.rv = snip.basename` {

class Resource {
	int x = 0;
};

class ${2:`!p snip.rv = snip.basename.title()`} {
	public:
		explicit $2();                               // default constructor

		virtual ~$2();                               // dtor
		$2(const $2& rhs);                         // copy constructor
		$2& operator=(const $2& rhs);              // copy assignment
		$2($2&& rhs);                              // move constructor
		$2& operator=($2&& rhs );                  // move assignment

	private:
		Resource* p;
};

//#endif /* $1 */


}  // namespace `!p snip.rv = snip.basename`
endsnippet



snippet cl5d "Rule of 5 class definition"
//#include <memory>  // unique_ptr
#include "${1:`!p snip.rv = snip.basename + '.h'`}"

namespace `!p snip.rv = snip.basename` {

  // Default constructor
  ${2:`!p snip.rv = snip.basename.title()`}::$2(): p{ new Resource() } {}

  // Special Member functions

  // dtor
  virtual $2()::~$2(){delete p;}

  // copy constructor
	$2::$2(const $2& rhs)
    : p{new Resource{*(rhs.p)}}{}

  // copy assignment
	 $2& $2::operator=(const $2& rhs){
	 if (&rhs != this) {
		 delete p;
		 p = nullptr;
		 p = new Resource(*(rhs.p));
	 }
	   return *this;
	}

  // move constructor
	$2::$2($2&& rhs)
    : p{rhs.p}{
    rhs.p = nullptr;
	}

  // move assignment
	$2& $2::operator=($2&& rhs ){
		if (&rhs != this) {
			delete p;
			p = rhs.p;
			rhs.p = nullptr;
		 }
		 return *this;
	}

}
endsnippet
